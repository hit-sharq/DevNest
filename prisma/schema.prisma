generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  clerkId           String             @unique
  email             String             @unique
  firstName         String?
  lastName          String?
  imageUrl          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  role              String             @default("user") // user, admin, super_admin

  // Subscription info
  subscriptionId     String?
  subscriptionStatus String?
  planType          String             @default("free") // free, basic, pro, enterprise

  // Instagram accounts
  instagramAccounts InstagramAccount[]

  // Campaigns
  campaigns ServiceOrder[]

  // Analytics
  analytics UserAnalytics[]
  serviceOrders     ServiceOrder[]

  @@map("users")
}

model InstagramAccount {
  id             String         @id @default(cuid())
  userId         String
  username       String
  displayName    String?
  bio            String?
  profilePic     String?
  followersCount Int            @default(0)
  followingCount Int            @default(0)
  postsCount     Int            @default(0)
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns      Campaign[]
  followers      Follower[]
  analytics      AccountAnalytics[]
  serviceOrders  ServiceOrder[]

  @@map("instagram_accounts")
}

model Campaign {
  id          String   @id @default(cuid())
  userId      String
  accountId   String
  name        String
  description String?
  status      String   @default("active") // active, paused, completed
  targetType  String   // hashtag, location, competitor
  targetValue String   // actual hashtag, location name, competitor username

  // Campaign settings
  dailyFollowLimit    Int @default(50)
  dailyUnfollowLimit  Int @default(30)
  dailyLikeLimit      Int @default(100)
  dailyCommentLimit   Int @default(20)

  // Results
  totalFollowsGained  Int @default(0)
  totalUnfollows      Int @default(0)
  totalLikes          Int @default(0)
  totalComments       Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  account InstagramAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  actions CampaignAction[]

  @@map("campaigns")
}

model CampaignAction {
  id         String   @id @default(cuid())
  campaignId String
  actionType String   // follow, unfollow, like, comment
  targetUser String   // username of target
  success    Boolean  @default(true)
  createdAt  DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_actions")
}

model Follower {
  id        String   @id @default(cuid())
  accountId String
  username  String
  displayName String?
  profilePic  String?
  followedAt  DateTime @default(now())
  unfollowedAt DateTime?
  isActive     Boolean @default(true)
  source       String? // campaign, organic, etc.

  account InstagramAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, username])
  @@map("followers")
}

model UserAnalytics {
  id     String   @id @default(cuid())
  userId String
  date   DateTime @default(now())

  // Daily metrics
  totalFollowers    Int @default(0)
  followersGained   Int @default(0)
  followersLost     Int @default(0)
  totalCampaigns    Int @default(0)
  activeCampaigns   Int @default(0)
  totalActions      Int @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("user_analytics")
}

model AccountAnalytics {
  id        String   @id @default(cuid())
  accountId String
  date      DateTime @default(now())

  // Daily account metrics
  followers    Int @default(0)
  following    Int @default(0)
  posts        Int @default(0)
  engagement   Float @default(0)

  account InstagramAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, date])
  @@map("account_analytics")
}

model ServiceOrder {
  id          String   @id @default(cuid())
  userId      String
  accountId   String
  serviceType String   // "followers", "likes", "comments", "views", "story_views"
  quantity    Int
  delivered   Int      @default(0) // Delivered amount
  price       Float
  postUrl     String?  // For likes and comments
  status      String   @default("pending") // "pending", "processing", "completed", "failed", "partial"
  orderDate   DateTime @default(now())
  startedAt   DateTime? // When delivery started
  completedAt DateTime? // When delivery completed
  
  // Delivery settings
  deliverySpeed String @default("normal") // "slow", "normal", "fast"
  targetCountry String? // Geographic targeting
  
  // Provider info
  providerId    String? // External service provider ID
  providerOrderId String? // Provider's order reference

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  account InstagramAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("service_orders")
}